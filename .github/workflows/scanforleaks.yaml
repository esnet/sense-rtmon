name: Secret Leak Scan via LLM

on:
  pull_request:
  push:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Determine changed or all files
      id: filelist
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git fetch origin ${{ github.base_ref }}
          git diff --name-only origin/${{ github.base_ref }}...HEAD > file_list.txt
        elif [ "${{ github.event_name }}" = "push" ]; then
          git diff --name-only HEAD^ HEAD > file_list.txt
        else
          find . -type f ! -path "./.git/*" > file_list.txt
        fi

    - name: Load .leakignore patterns
      run: |
        if [ -f .leakignore ]; then
          IGNORE=$(jq -Rs . < .leakignore)
        else
          IGNORE="\"\""
        fi
        echo "IGNORE=$IGNORE" >> $GITHUB_ENV

    - name: Analyze each file
      env:
        AIAPIKEY: ${{ secrets.AIAPIKEY }}
        AIAPIURL: ${{ secrets.AIAPIURL }}
      run: |
        echo "Starting per-file secret scan..."
        RESULT=0

        while IFS= read -r FILE; do
          if [ ! -f "$FILE" ]; then continue; fi
          echo "Scanning: $FILE"

          CONTENT=$(jq -Rs . < "$FILE")

          PAYLOAD=$(jq -n \
            --arg model "openai/gpt-4o-mini" \
            --arg ignore "$IGNORE" \
            --arg file "$FILE" \
            --arg content "$CONTENT" \
            '{
              model: $model,
              temperature: 0.2,
              messages: [
                {
                  role: "system",
                  content: "You are a security reviewer. You are given one file. Return a number from 0 to 100 representing the likelihood that a secret (e.g., password, API key, token, credential) was leaked. Ignore values clearly matching the .leakignore list. If the score is over 50, briefly explain. Otherwise, return just the number."
                },
                {
                  role: "user",
                  content: "Here is the .leakignore list:\n\($ignore)\n\nAnd here is the file (\($file)) content:\n\($content)"
                }
              ]
            }')

          echo "$PAYLOAD" > payload.json

          curl -s "$AIAPIURL" \
            -H "Authorization: Bearer $AIAPIKEY" \
            -H "Content-Type: application/json" \
            -d @payload.json > response.json

          RESPONSE=$(jq -r '.choices[0].message.content' response.json)
          SCORE=$(echo "$RESPONSE" | grep -o '[0-9]\+' | head -n1)
          echo "[$FILE] -> Score: $SCORE"

          if [ "$SCORE" -ge 50 ]; then
            echo "Secret risk in file: $FILE (score: $SCORE)"
            echo "Reason:\n$RESPONSE"
            RESULT=1
          fi
        done < file_list.txt

        exit $RESULT
